# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Repository(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, full_name: str=None, url: str=None, private: bool=False, language: str=None, created_at: datetime=None, updated_at: datetime=None, pushed_at: datetime=None, stars_count: int=None, forks_count: int=None, watchers_count: int=None, issue_count: int=None, pr_count: int=None, workflows_count: int=None):  # noqa: E501
        """Repository - a model defined in Swagger

        :param full_name: The full_name of this Repository.  # noqa: E501
        :type full_name: str
        :param url: The url of this Repository.  # noqa: E501
        :type url: str
        :param private: The private of this Repository.  # noqa: E501
        :type private: bool
        :param language: The language of this Repository.  # noqa: E501
        :type language: str
        :param created_at: The created_at of this Repository.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Repository.  # noqa: E501
        :type updated_at: datetime
        :param pushed_at: The pushed_at of this Repository.  # noqa: E501
        :type pushed_at: datetime
        :param stars_count: The stars_count of this Repository.  # noqa: E501
        :type stars_count: int
        :param forks_count: The forks_count of this Repository.  # noqa: E501
        :type forks_count: int
        :param watchers_count: The watchers_count of this Repository.  # noqa: E501
        :type watchers_count: int
        :param issue_count: The issue_count of this Repository.  # noqa: E501
        :type issue_count: int
        :param pr_count: The pr_count of this Repository.  # noqa: E501
        :type pr_count: int
        :param workflows_count: The workflows_count of this Repository.  # noqa: E501
        :type workflows_count: int
        """
        self.swagger_types = {
            'full_name': str,
            'url': str,
            'private': bool,
            'language': str,
            'created_at': datetime,
            'updated_at': datetime,
            'pushed_at': datetime,
            'stars_count': int,
            'forks_count': int,
            'watchers_count': int,
            'issue_count': int,
            'pr_count': int,
            'workflows_count': int
        }

        self.attribute_map = {
            'full_name': 'full_name',
            'url': 'url',
            'private': 'private',
            'language': 'language',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'pushed_at': 'pushed_at',
            'stars_count': 'stars_count',
            'forks_count': 'forks_count',
            'watchers_count': 'watchers_count',
            'issue_count': 'issue_count',
            'pr_count': 'pr_count',
            'workflows_count': 'workflows_count'
        }
        self._full_name = full_name
        self._url = url
        self._private = private
        self._language = language
        self._created_at = created_at
        self._updated_at = updated_at
        self._pushed_at = pushed_at
        self._stars_count = stars_count
        self._forks_count = forks_count
        self._watchers_count = watchers_count
        self._issue_count = issue_count
        self._pr_count = pr_count
        self._workflows_count = workflows_count

    @classmethod
    def from_dict(cls, dikt) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Repository of this Repository.  # noqa: E501
        :rtype: Repository
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self) -> str:
        """Gets the full_name of this Repository.


        :return: The full_name of this Repository.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this Repository.


        :param full_name: The full_name of this Repository.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def url(self) -> str:
        """Gets the url of this Repository.


        :return: The url of this Repository.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Repository.


        :param url: The url of this Repository.
        :type url: str
        """

        self._url = url

    @property
    def private(self) -> bool:
        """Gets the private of this Repository.


        :return: The private of this Repository.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private: bool):
        """Sets the private of this Repository.


        :param private: The private of this Repository.
        :type private: bool
        """

        self._private = private

    @property
    def language(self) -> str:
        """Gets the language of this Repository.


        :return: The language of this Repository.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this Repository.


        :param language: The language of this Repository.
        :type language: str
        """

        self._language = language

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Repository.


        :return: The created_at of this Repository.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Repository.


        :param created_at: The created_at of this Repository.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Repository.


        :return: The updated_at of this Repository.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Repository.


        :param updated_at: The updated_at of this Repository.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def pushed_at(self) -> datetime:
        """Gets the pushed_at of this Repository.


        :return: The pushed_at of this Repository.
        :rtype: datetime
        """
        return self._pushed_at

    @pushed_at.setter
    def pushed_at(self, pushed_at: datetime):
        """Sets the pushed_at of this Repository.


        :param pushed_at: The pushed_at of this Repository.
        :type pushed_at: datetime
        """

        self._pushed_at = pushed_at

    @property
    def stars_count(self) -> int:
        """Gets the stars_count of this Repository.


        :return: The stars_count of this Repository.
        :rtype: int
        """
        return self._stars_count

    @stars_count.setter
    def stars_count(self, stars_count: int):
        """Sets the stars_count of this Repository.


        :param stars_count: The stars_count of this Repository.
        :type stars_count: int
        """

        self._stars_count = stars_count

    @property
    def forks_count(self) -> int:
        """Gets the forks_count of this Repository.


        :return: The forks_count of this Repository.
        :rtype: int
        """
        return self._forks_count

    @forks_count.setter
    def forks_count(self, forks_count: int):
        """Sets the forks_count of this Repository.


        :param forks_count: The forks_count of this Repository.
        :type forks_count: int
        """

        self._forks_count = forks_count

    @property
    def watchers_count(self) -> int:
        """Gets the watchers_count of this Repository.


        :return: The watchers_count of this Repository.
        :rtype: int
        """
        return self._watchers_count

    @watchers_count.setter
    def watchers_count(self, watchers_count: int):
        """Sets the watchers_count of this Repository.


        :param watchers_count: The watchers_count of this Repository.
        :type watchers_count: int
        """

        self._watchers_count = watchers_count

    @property
    def issue_count(self) -> int:
        """Gets the issue_count of this Repository.


        :return: The issue_count of this Repository.
        :rtype: int
        """
        return self._issue_count

    @issue_count.setter
    def issue_count(self, issue_count: int):
        """Sets the issue_count of this Repository.


        :param issue_count: The issue_count of this Repository.
        :type issue_count: int
        """

        self._issue_count = issue_count

    @property
    def pr_count(self) -> int:
        """Gets the pr_count of this Repository.


        :return: The pr_count of this Repository.
        :rtype: int
        """
        return self._pr_count

    @pr_count.setter
    def pr_count(self, pr_count: int):
        """Sets the pr_count of this Repository.


        :param pr_count: The pr_count of this Repository.
        :type pr_count: int
        """

        self._pr_count = pr_count

    @property
    def workflows_count(self) -> int:
        """Gets the workflows_count of this Repository.


        :return: The workflows_count of this Repository.
        :rtype: int
        """
        return self._workflows_count

    @workflows_count.setter
    def workflows_count(self, workflows_count: int):
        """Sets the workflows_count of this Repository.


        :param workflows_count: The workflows_count of this Repository.
        :type workflows_count: int
        """

        self._workflows_count = workflows_count
