# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.author import Author  # noqa: F401,E501
from swagger_server.models.issue_labels import IssueLabels  # noqa: F401,E501
from swagger_server import util


class Issue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, number: int=None, repo: str=None, title: str=None, url: str=None, state: str=None, body: str=None, author: Author=None, labels: List[IssueLabels]=None, comments: int=None, created_at: datetime=None, updated_at: datetime=None, closed_at: datetime=None):  # noqa: E501
        """Issue - a model defined in Swagger

        :param number: The number of this Issue.  # noqa: E501
        :type number: int
        :param repo: The repo of this Issue.  # noqa: E501
        :type repo: str
        :param title: The title of this Issue.  # noqa: E501
        :type title: str
        :param url: The url of this Issue.  # noqa: E501
        :type url: str
        :param state: The state of this Issue.  # noqa: E501
        :type state: str
        :param body: The body of this Issue.  # noqa: E501
        :type body: str
        :param author: The author of this Issue.  # noqa: E501
        :type author: Author
        :param labels: The labels of this Issue.  # noqa: E501
        :type labels: List[IssueLabels]
        :param comments: The comments of this Issue.  # noqa: E501
        :type comments: int
        :param created_at: The created_at of this Issue.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Issue.  # noqa: E501
        :type updated_at: datetime
        :param closed_at: The closed_at of this Issue.  # noqa: E501
        :type closed_at: datetime
        """
        self.swagger_types = {
            'number': int,
            'repo': str,
            'title': str,
            'url': str,
            'state': str,
            'body': str,
            'author': Author,
            'labels': List[IssueLabels],
            'comments': int,
            'created_at': datetime,
            'updated_at': datetime,
            'closed_at': datetime
        }

        self.attribute_map = {
            'number': 'number',
            'repo': 'repo',
            'title': 'title',
            'url': 'url',
            'state': 'state',
            'body': 'body',
            'author': 'author',
            'labels': 'labels',
            'comments': 'comments',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'closed_at': 'closed_at'
        }
        self._number = number
        self._repo = repo
        self._title = title
        self._url = url
        self._state = state
        self._body = body
        self._author = author
        self._labels = labels
        self._comments = comments
        self._created_at = created_at
        self._updated_at = updated_at
        self._closed_at = closed_at

    @classmethod
    def from_dict(cls, dikt) -> 'Issue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Issue of this Issue.  # noqa: E501
        :rtype: Issue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self) -> int:
        """Gets the number of this Issue.


        :return: The number of this Issue.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this Issue.


        :param number: The number of this Issue.
        :type number: int
        """

        self._number = number

    @property
    def repo(self) -> str:
        """Gets the repo of this Issue.


        :return: The repo of this Issue.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo: str):
        """Sets the repo of this Issue.


        :param repo: The repo of this Issue.
        :type repo: str
        """

        self._repo = repo

    @property
    def title(self) -> str:
        """Gets the title of this Issue.


        :return: The title of this Issue.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Issue.


        :param title: The title of this Issue.
        :type title: str
        """

        self._title = title

    @property
    def url(self) -> str:
        """Gets the url of this Issue.


        :return: The url of this Issue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Issue.


        :param url: The url of this Issue.
        :type url: str
        """

        self._url = url

    @property
    def state(self) -> str:
        """Gets the state of this Issue.


        :return: The state of this Issue.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Issue.


        :param state: The state of this Issue.
        :type state: str
        """
        allowed_values = ["OPEN", "CLOSED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def body(self) -> str:
        """Gets the body of this Issue.


        :return: The body of this Issue.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this Issue.


        :param body: The body of this Issue.
        :type body: str
        """

        self._body = body

    @property
    def author(self) -> Author:
        """Gets the author of this Issue.


        :return: The author of this Issue.
        :rtype: Author
        """
        return self._author

    @author.setter
    def author(self, author: Author):
        """Sets the author of this Issue.


        :param author: The author of this Issue.
        :type author: Author
        """

        self._author = author

    @property
    def labels(self) -> List[IssueLabels]:
        """Gets the labels of this Issue.


        :return: The labels of this Issue.
        :rtype: List[IssueLabels]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[IssueLabels]):
        """Sets the labels of this Issue.


        :param labels: The labels of this Issue.
        :type labels: List[IssueLabels]
        """

        self._labels = labels

    @property
    def comments(self) -> int:
        """Gets the comments of this Issue.


        :return: The comments of this Issue.
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments: int):
        """Sets the comments of this Issue.


        :param comments: The comments of this Issue.
        :type comments: int
        """

        self._comments = comments

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Issue.


        :return: The created_at of this Issue.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Issue.


        :param created_at: The created_at of this Issue.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Issue.


        :return: The updated_at of this Issue.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Issue.


        :param updated_at: The updated_at of this Issue.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def closed_at(self) -> datetime:
        """Gets the closed_at of this Issue.


        :return: The closed_at of this Issue.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at: datetime):
        """Sets the closed_at of this Issue.


        :param closed_at: The closed_at of this Issue.
        :type closed_at: datetime
        """

        self._closed_at = closed_at
